nidsAllDupsPatients <- unique(dups_idart_openmrs$patientid)
for (i in 1:length(nidsAllDupsPatients)) {
nid_duplicado <- nidsAllDupsPatients[i]
index <- which(dups_idart_openmrs$patientid==nid_duplicado)
df_temp <- dups_idart_openmrs[index,]
if(length(index)==2){
if(dups_idart_openmrs$uuid[index[1]] == dups_idart_openmrs$uuid[index[2]] ){  ## Grupo 1 (G1)
# Verificar se e duplicado no OpenMRS
if(dups_idart_openmrs$uuid[index[1]] %in% duplicadosOpenmrs$uuid){
# Solucao Grupo 1 (G1.1)
solucao <- "G1.1 -  Unir  os paciente no iDART e no OpenMRS, o   paciente preferido e aquele que tiver levantamentos mais actualizados"
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else
{
# nao e duplicado no OpenMRS
# Solucao Grupo 1.2 (G1.2)
solucao <- "G1.2 - Unir  os paciente no iDART , o   paciente preferido e aquele que tiver levantamentos mais actualizados"
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
}
else { ## Grupo 2 (G2)
#  avaliar o grau de simetria dos nomes , para saber se trata-se do mesmo paciente
nome_pat_1 <- dups_idart_openmrs$full_name[index[1]]
nome_pat_2 <- dups_idart_openmrs$full_name[index[2]]
estado_tarv_1 <- dups_idart_openmrs$estado_tarv[index[1]]
estado_tarv_2 <- dups_idart_openmrs$estado_tarv[index[2]]
if(stringdist(nome_pat_1,nome_pat_2, method = "jw") > 0.1){     # Grupo 2 (G2)
#s e o rsultado de stringdist for:
# 0 - perfect match, 0,1 - minimo aceitavel definido por mim, 1 - no match at al
if(! (is.na(estado_tarv_1) | is.na(estado_tarv_2)) ) {
if(estado_tarv_1 == estado_tarv_2 & estado_tarv_2=='ABANDONO')
{ # Grupo 2.1 (G2.1) Pacientes  duplicados  com  uuids diferentes e nomes diferentes sendo que os dois sao abandonos
pac_lev_menos_rec <- getPacLevMenosRecente(index,nid_duplicado)
solucao <- paste0("G2.1 - Trocar o nid de um dos pacientes no iDART e tambem no OpenMRS,  de preferencia: ", pac_lev_menos_rec, " por ter a data do ult lev menos recente")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
else  if(estado_tarv_1 != estado_tarv_2 &  'ACTIVO NO PROGRAMA' %in%  c(estado_tarv_1,estado_tarv_2)){
if( 'TRANSFERIDO DE' %in%  c(estado_tarv_1,estado_tarv_2)){  # Solucao (G2.2) - Os dois pacientes estao activos em tarv
solucao <- paste0("G2.2 - Trocar o nid de um dos pacientes, os dois estao activos, verificar processos clinicos")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else{
if(estado_tarv_1== 'ACTIVO NO PROGRAMA'){  # Grupo 2.3 (G2.3):  -Pacientes  duplicados  com  uuids diferentes e nomes diferentes sendo que um dos pacientes nao e activo
idex <-which(dups_idart_openmrs$estado_tarv==estado_tarv_2 & dups_idart_openmrs$patientid==nid_duplicado)
nome_pat_nao_activo <- dups_idart_openmrs$full_name[idex]
solucao <- paste0("G2.3 - Trocar o nid do paciente: ", nome_pat_nao_activo, " ele nao e activo em tarv")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else {
idex <-which(dups_idart_openmrs$estado_tarv==estado_tarv_1 & dups_idart_openmrs$patientid==nid_duplicado)
nome_pat_transf <- dups_idart_openmrs$full_name[idex]
solucao <- paste0("G2.3 - Trocar o nid de um dos pacientes de preferencia: ", nome_pat_transf, " por ser transferido")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
}
}
else  {
# Solucao (G2.2) - Os dois pacientes estao activos em tarv
solucao <- paste0("G2.2 - Trocar o nid de um dos pacientes, os dois estao activos, verificar processos clinicos")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
} else {
if( (is.na(estado_tarv_1) | is.na(estado_tarv_2)) ) {
if(is.na(estado_tarv_1)){
if(estado_tarv_2 %in% c('ABANDONO','TRANSFERIDO PARA','OBITO')){
# Verificar se e duplicado no OpenMRS  haha
if(nid_duplicado %in% duplicadosOpenmrs$Nid){
idex <-which(dups_idart_openmrs$estado_tarv==estado_tarv_2 & dups_idart_openmrs$patientid==nid_duplicado)
nome_pat_saiu<- dups_idart_openmrs$full_name[idex]
solucao <- paste0("G2.5-  Trocar no OpenMRS e o correspondente no iDART o nid do Paciente: ",nome_pat_saiu," Pois, ja nao esta a fazer o tratamento")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else {
solucao <- paste0("G2.5-  Trocar no   iDART o nid do Paciente: ",nome_pat_saiu," Pois, ja nao esta a fazer o tratamento")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
} else {
if(estado_tarv_1 %in% c('ABANDONO','TRANSFERIDO PARA','OBITO')){
# Verificar se e duplicado no OpenMRS  haha
if(nid_duplicado %in% duplicadosOpenmrs$Nid){
idex <-which(dups_idart_openmrs$estado_tarv==estado_tarv_2 & dups_idart_openmrs$patientid==nid_duplicado)
nome_pat_saiu<- dups_idart_openmrs$full_name[idex]
solucao <- paste0("G2.5-  Trocar no OpenMRS e o correspondente no iDART o nid do Paciente: ",nome_pat_saiu," Pois, ja nao esta a fazer o tratamento")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else {
solucao <- paste0("G2.5-  Trocar no   iDART o nid do Paciente: ",nome_pat_saiu," Pois, ja nao esta a fazer o tratamento")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
}
}
# Verificar se e duplicado no OpenMRS  haha
if(nid_duplicado %in% duplicadosOpenmrs$Nid){
solucao <- "G2.6-  Trocar o nid de  um dos pacientes  no OpenMRS e o correspondente no iDART"
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else
# Solucao (G2.5) - Um dos  pacientes nao tem estado programa TARV  OpenMRS
solucao <- paste0("G2.2 - Trocar o nid de um dos pacientes, verificar processos clinicos")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
}
} }
else {  #  Nomes sao semelhantes , podemos assumir que trata-se do mesmo pacientes
# Verficar se sao duplicados no openmrs
## Grupo   3.1 (G3.1):  -Pacientes  duplicados no iDART e no OpenMRS , com nomes semelhantes
# priorizar o que tiver levantamentos mais actualizados
# if(nid_duplicado %in% duplicadosOpenmrs$Nid){
# Solucao Grupo 3.1 (G3.1)
nome_lev_mais_act <- getPacLevMaisRecente(index,nid_duplicado)
solucao <- paste0("G3.1 - Unir  os paciente ",nome_pat_1," e ",nome_pat_2, " no iDART e no OpenMRS. Paciente com nome: ",
nome_lev_mais_act, " e preferido por ter a data do ult lev mais recente")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
# } else {
#
#
#   solucao <- paste0("G3.1  - Unir  os paciente  no iDART . O pac preferido e aquele que tiver data do ult lev mais recente")
#   SetSolucao(index,solucao)
# }
}
}
}
}
a = subset(dups_idart_openmrs, TRUE,c( 'id', 'uuid',
'patientid',
'dateofbirth',
'full_name',
'total_levantamentos',
'full_name_openmrs',
'identifier',
'birthdate',
'data_ult_levant',
'estado_tarv' , 'solucao'
))
View(a)
table(a$estado_tarv)
a$solucao[3]
a$solucao[6]
'3C33DEEC-7108-486B-AFCB-E0A439D31DA2' %in% duplicadosOpenmrs$uuid
nid_duplicado='0111030701/2008/00761'
nid_duplicado %in% duplicadosOpenmrs$Nid
index <- which(dups_idart_openmrs$patientid==nid_duplicado)
nome_pat_1 <- dups_idart_openmrs$full_name[index[1]]
nome_pat_2 <- dups_idart_openmrs$full_name[index[2]]
estado_tarv_1 <- dups_idart_openmrs$estado_tarv[index[1]]
estado_tarv_2 <- dups_idart_openmrs$estado_tarv[index[2]]
! (is.na(estado_tarv_1) | is.na(estado_tarv_2))
estado_tarv_1 != estado_tarv_2 &  'ACTIVO NO PROGRAMA' %in%  c(estado_tarv_1,estado_tarv_2)
nidsAllDupsPatients <- unique(dups_idart_openmrs$patientid)
for (i in 1:length(nidsAllDupsPatients)) {
nid_duplicado <- nidsAllDupsPatients[i]
index <- which(dups_idart_openmrs$patientid==nid_duplicado)
df_temp <- dups_idart_openmrs[index,]
if(length(index)==2){
if(dups_idart_openmrs$uuid[index[1]] == dups_idart_openmrs$uuid[index[2]] ){  ## Grupo 1 (G1)
# Verificar se e duplicado no OpenMRS
if(dups_idart_openmrs$uuid[index[1]] %in% duplicadosOpenmrs$uuid){
# Solucao Grupo 1 (G1.1)
solucao <- "G1.1 -  Unir  os paciente no iDART e no OpenMRS, o   paciente preferido e aquele que tiver levantamentos mais actualizados"
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else
{
# nao e duplicado no OpenMRS
# Solucao Grupo 1.2 (G1.2)
solucao <- "G1.2 - Unir  os paciente no iDART , o   paciente preferido e aquele que tiver levantamentos mais actualizados"
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
}
else { ## Grupo 2 (G2)
#  avaliar o grau de simetria dos nomes , para saber se trata-se do mesmo paciente
nome_pat_1 <- dups_idart_openmrs$full_name[index[1]]
nome_pat_2 <- dups_idart_openmrs$full_name[index[2]]
estado_tarv_1 <- dups_idart_openmrs$estado_tarv[index[1]]
estado_tarv_2 <- dups_idart_openmrs$estado_tarv[index[2]]
if(stringdist(nome_pat_1,nome_pat_2, method = "jw") > 0.1){     # Grupo 2 (G2)
#s e o rsultado de stringdist for:
# 0 - perfect match, 0,1 - minimo aceitavel definido por mim, 1 - no match at al
if(! (is.na(estado_tarv_1) | is.na(estado_tarv_2)) ) {
if(estado_tarv_1 == estado_tarv_2 & estado_tarv_2=='ABANDONO')
{ # Grupo 2.1 (G2.1) Pacientes  duplicados  com  uuids diferentes e nomes diferentes sendo que os dois sao abandonos
pac_lev_menos_rec <- getPacLevMenosRecente(index,nid_duplicado)
solucao <- paste0("G2.1 - Trocar o nid de um dos pacientes no iDART e tambem no OpenMRS,  de preferencia: ", pac_lev_menos_rec, " por ter a data do ult lev menos recente")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
else  if(estado_tarv_1 != estado_tarv_2 &  'ACTIVO NO PROGRAMA' %in%  c(estado_tarv_1,estado_tarv_2)){
if( 'TRANSFERIDO DE' %in%  c(estado_tarv_1,estado_tarv_2)){  # Solucao (G2.2) - Os dois pacientes estao activos em tarv
solucao <- paste0("G2.2 - Trocar o nid de um dos pacientes, os dois estao activos, verificar processos clinicos")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else{
if(estado_tarv_1== 'ACTIVO NO PROGRAMA'){  # Grupo 2.3 (G2.3):  -Pacientes  duplicados  com  uuids diferentes e nomes diferentes sendo que um dos pacientes nao e activo
idex <-which(dups_idart_openmrs$estado_tarv==estado_tarv_2 & dups_idart_openmrs$patientid==nid_duplicado)
nome_pat_nao_activo <- dups_idart_openmrs$full_name[idex]
solucao <- paste0("G2.3 - Trocar o nid do paciente: ", nome_pat_nao_activo, " ele nao e activo em tarv")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else {
idex <-which(dups_idart_openmrs$estado_tarv==estado_tarv_1 & dups_idart_openmrs$patientid==nid_duplicado)
nome_pat_transf <- dups_idart_openmrs$full_name[idex]
solucao <- paste0("G2.3 - Trocar o nid de um dos pacientes de preferencia: ", nome_pat_transf, " por ser transferido")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
}
}
else  {
# Solucao (G2.2) - Os dois pacientes estao activos em tarv gaga
if(nid_duplicado %in% duplicadosOpenmrs$Nid){
solucao <- paste0("G2.2 - Trocar o nid de um dos pacientes no OpenMRS e  o Seu correspondente no iDART, os dois estao activos, verificar processos clinicos")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else {
solucao <- paste0("G2.2 - Trocar o nid de um dos pacientes, os dois estao activos, verificar processos clinicos")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
}
} else {
if( (is.na(estado_tarv_1) | is.na(estado_tarv_2)) ) {
if(is.na(estado_tarv_1)){
if(estado_tarv_2 %in% c('ABANDONO','TRANSFERIDO PARA','OBITO')){
# Verificar se e duplicado no OpenMRS  haha
if(nid_duplicado %in% duplicadosOpenmrs$Nid){
idex <-which(dups_idart_openmrs$estado_tarv==estado_tarv_2 & dups_idart_openmrs$patientid==nid_duplicado)
nome_pat_saiu<- dups_idart_openmrs$full_name[idex]
solucao <- paste0("G2.5-  Trocar no OpenMRS e o correspondente no iDART o nid do Paciente: ",nome_pat_saiu," Pois, ja nao esta a fazer o tratamento")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else {
solucao <- paste0("G2.5-  Trocar no   iDART o nid do Paciente: ",nome_pat_saiu," Pois, ja nao esta a fazer o tratamento")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
} else {
if(estado_tarv_1 %in% c('ABANDONO','TRANSFERIDO PARA','OBITO')){
# Verificar se e duplicado no OpenMRS  haha
if(nid_duplicado %in% duplicadosOpenmrs$Nid){
idex <-which(dups_idart_openmrs$estado_tarv==estado_tarv_2 & dups_idart_openmrs$patientid==nid_duplicado)
nome_pat_saiu<- dups_idart_openmrs$full_name[idex]
solucao <- paste0("G2.5-  Trocar no OpenMRS e o correspondente no iDART o nid do Paciente: ",nome_pat_saiu," Pois, ja nao esta a fazer o tratamento")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else {
solucao <- paste0("G2.5-  Trocar no   iDART o nid do Paciente: ",nome_pat_saiu," Pois, ja nao esta a fazer o tratamento")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
}
}
# Verificar se e duplicado no OpenMRS  haha
if(nid_duplicado %in% duplicadosOpenmrs$Nid){
solucao <- "G2.6-  Trocar o nid de  um dos pacientes  no OpenMRS e o correspondente no iDART"
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else
# Solucao (G2.5) - Um dos  pacientes nao tem estado programa TARV  OpenMRS
solucao <- paste0("G2.2 - Trocar o nid de um dos pacientes, verificar processos clinicos")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
}
} }
else {  #  Nomes sao semelhantes , podemos assumir que trata-se do mesmo pacientes
# Verficar se sao duplicados no openmrs
## Grupo   3.1 (G3.1):  -Pacientes  duplicados no iDART e no OpenMRS , com nomes semelhantes
# priorizar o que tiver levantamentos mais actualizados
# if(nid_duplicado %in% duplicadosOpenmrs$Nid){
# Solucao Grupo 3.1 (G3.1)
nome_lev_mais_act <- getPacLevMaisRecente(index,nid_duplicado)
solucao <- paste0("G3.1 - Unir  os paciente ",nome_pat_1," e ",nome_pat_2, " no iDART e no OpenMRS. Paciente com nome: ",
nome_lev_mais_act, " e preferido por ter a data do ult lev mais recente")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
# } else {
#
#
#   solucao <- paste0("G3.1  - Unir  os paciente  no iDART . O pac preferido e aquele que tiver data do ult lev mais recente")
#   SetSolucao(index,solucao)
# }
}
}
}
}
a = subset(dups_idart_openmrs, TRUE,c( 'id', 'uuid',
'patientid',
'dateofbirth',
'full_name',
'total_levantamentos',
'full_name_openmrs',
'identifier',
'birthdate',
'data_ult_levant',
'estado_tarv' , 'solucao'
))
View(a)
a$solucao[6]
a$solucao[164]
'	87DB0C02-8B48-492A-B95A-ED3A71A5C5DA' %in% duplicadosOpenmrs$uuid
'87DB0C02-8B48-492A-B95A-ED3A71A5C5DA' %in% duplicadosOpenmrs$uuid
'9db89cf2-39dd-4baa-baf3-05470c03c6ff' %in% duplicadosOpenmrs$uuid
nid_duplicado='0111030701/2014/00199'
index <- which(dups_idart_openmrs$patientid==nid_duplicado)
nome_pat_1 <- dups_idart_openmrs$full_name[index[1]]
nome_pat_2 <- dups_idart_openmrs$full_name[index[2]]
estado_tarv_1 <- dups_idart_openmrs$estado_tarv[index[1]]
estado_tarv_2 <- dups_idart_openmrs$estado_tarv[index[2]]
stringdist(nome_pat_1,nome_pat_2, method = "jw") > 0.1
! (is.na(estado_tarv_1) | is.na(estado_tarv_2))
estado_tarv_1 != estado_tarv_2 &  'ACTIVO NO PROGRAMA' %in%  c(estado_tarv_1,estado_tarv_2)
'TRANSFERIDO DE' %in%  c(estado_tarv_1,estado_tarv_2)
nidsAllDupsPatients <- unique(dups_idart_openmrs$patientid)
for (i in 1:length(nidsAllDupsPatients)) {
nid_duplicado <- nidsAllDupsPatients[i]
index <- which(dups_idart_openmrs$patientid==nid_duplicado)
df_temp <- dups_idart_openmrs[index,]
if(length(index)==2){
if(dups_idart_openmrs$uuid[index[1]] == dups_idart_openmrs$uuid[index[2]] ){  ## Grupo 1 (G1)
# Verificar se e duplicado no OpenMRS
if(dups_idart_openmrs$uuid[index[1]] %in% duplicadosOpenmrs$uuid){
# Solucao Grupo 1 (G1.1)
solucao <- "G1.1 -  Unir  os paciente no iDART e no OpenMRS, o   paciente preferido e aquele que tiver levantamentos mais actualizados"
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else
{
# nao e duplicado no OpenMRS
# Solucao Grupo 1.2 (G1.2)
solucao <- "G1.2 - Unir  os paciente no iDART , o   paciente preferido e aquele que tiver levantamentos mais actualizados"
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
}
else { ## Grupo 2 (G2)
#  avaliar o grau de simetria dos nomes , para saber se trata-se do mesmo paciente
nome_pat_1 <- dups_idart_openmrs$full_name[index[1]]
nome_pat_2 <- dups_idart_openmrs$full_name[index[2]]
estado_tarv_1 <- dups_idart_openmrs$estado_tarv[index[1]]
estado_tarv_2 <- dups_idart_openmrs$estado_tarv[index[2]]
if(stringdist(nome_pat_1,nome_pat_2, method = "jw") > 0.1){     # Grupo 2 (G2)
#s e o rsultado de stringdist for:
# 0 - perfect match, 0,1 - minimo aceitavel definido por mim, 1 - no match at al
if(! (is.na(estado_tarv_1) | is.na(estado_tarv_2)) ) {
if(estado_tarv_1 == estado_tarv_2 & estado_tarv_2=='ABANDONO')
{ # Grupo 2.1 (G2.1) Pacientes  duplicados  com  uuids diferentes e nomes diferentes sendo que os dois sao abandonos
pac_lev_menos_rec <- getPacLevMenosRecente(index,nid_duplicado)
solucao <- paste0("G2.1 - Trocar o nid de um dos pacientes no iDART e tambem no OpenMRS,  de preferencia: ", pac_lev_menos_rec, " por ter a data do ult lev menos recente")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
else  if(estado_tarv_1 != estado_tarv_2 &  'ACTIVO NO PROGRAMA' %in%  c(estado_tarv_1,estado_tarv_2)){
if( 'TRANSFERIDO DE' %in%  c(estado_tarv_1,estado_tarv_2)){  # Solucao (G2.2) - Os dois pacientes estao activos em tarv
if(nid_duplicado %in% duplicadosOpenmrs$Nid){
solucao <- paste0("G2.2 - Pacientes duplicados no iDART e OpenMRS, Trocar o nid de um dos pacientes,  verificar processos clinicos")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else {
solucao <- paste0("G2.2 - Trocar o nid de um dos pacientes,  verificar processos clinicos")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
} else{
if(estado_tarv_1== 'ACTIVO NO PROGRAMA'){  # Grupo 2.3 (G2.3):  -Pacientes  duplicados  com  uuids diferentes e nomes diferentes sendo que um dos pacientes nao e activo
if(nid_duplicado %in% duplicadosOpenmrs$Nid){
idex <-which(dups_idart_openmrs$estado_tarv==estado_tarv_2 & dups_idart_openmrs$patientid==nid_duplicado)
nome_pat_nao_activo <- dups_idart_openmrs$full_name[idex]
solucao <- paste0("G2.3 - Trocar o nid do paciente : ", nome_pat_nao_activo, " no OpenMRS e iDART, ele nao e activo em tarv")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else {
idex <-which(dups_idart_openmrs$estado_tarv==estado_tarv_2 & dups_idart_openmrs$patientid==nid_duplicado)
nome_pat_nao_activo <- dups_idart_openmrs$full_name[idex]
solucao <- paste0("G2.3 - Trocar o nid do paciente : ", nome_pat_nao_activo, " no ele nao e activo em tarv")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
} else {
if(nid_duplicado %in% duplicadosOpenmrs$Nid){
idex <-which(dups_idart_openmrs$estado_tarv==estado_tarv_1 & dups_idart_openmrs$patientid==nid_duplicado)
nome_pat_transf <- dups_idart_openmrs$full_name[idex]
solucao <- paste0("G2.3 - Trocar o nid de um dos pacientes no OpenMRS e iDART de preferencia: ", nome_pat_transf, " por ter sido transferido")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else {
idex <-which(dups_idart_openmrs$estado_tarv==estado_tarv_1 & dups_idart_openmrs$patientid==nid_duplicado)
nome_pat_transf <- dups_idart_openmrs$full_name[idex]
solucao <- paste0("G2.3 - Trocar o nid de um dos pacientes de preferencia: ", nome_pat_transf, " por ter sido transferido")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
}
}
}
else  {
# Solucao (G2.2) - Os dois pacientes estao activos em tarv gaga
if(nid_duplicado %in% duplicadosOpenmrs$Nid){
solucao <- paste0("G2.2 - Trocar o nid de um dos pacientes no OpenMRS e  o Seu correspondente no iDART, os dois estao activos, verificar processos clinicos")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else {
solucao <- paste0("G2.2 - Trocar o nid de um dos pacientes, os dois estao activos, verificar processos clinicos")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
}
} else {
if( (is.na(estado_tarv_1) | is.na(estado_tarv_2)) ) {
if(is.na(estado_tarv_1)){
if(estado_tarv_2 %in% c('ABANDONO','TRANSFERIDO PARA','OBITO')){
# Verificar se e duplicado no OpenMRS  haha
if(nid_duplicado %in% duplicadosOpenmrs$Nid){
idex <-which(dups_idart_openmrs$estado_tarv==estado_tarv_2 & dups_idart_openmrs$patientid==nid_duplicado)
nome_pat_saiu<- dups_idart_openmrs$full_name[idex]
solucao <- paste0("G2.5-  Trocar no OpenMRS e o correspondente no iDART o nid do Paciente: ",nome_pat_saiu," Pois, ja nao esta a fazer o tratamento")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else {
solucao <- paste0("G2.5-  Trocar no   iDART o nid do Paciente: ",nome_pat_saiu," Pois, ja nao esta a fazer o tratamento")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
} else {
if(estado_tarv_1 %in% c('ABANDONO','TRANSFERIDO PARA','OBITO')){
# Verificar se e duplicado no OpenMRS  haha
if(nid_duplicado %in% duplicadosOpenmrs$Nid){
idex <-which(dups_idart_openmrs$estado_tarv==estado_tarv_2 & dups_idart_openmrs$patientid==nid_duplicado)
nome_pat_saiu<- dups_idart_openmrs$full_name[idex]
solucao <- paste0("G2.5-  Trocar no OpenMRS e o correspondente no iDART o nid do Paciente: ",nome_pat_saiu," Pois, ja nao esta a fazer o tratamento")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else {
solucao <- paste0("G2.5-  Trocar no   iDART o nid do Paciente: ",nome_pat_saiu," Pois, ja nao esta a fazer o tratamento")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
}
}
# Verificar se e duplicado no OpenMRS  haha
if(nid_duplicado %in% duplicadosOpenmrs$Nid){
solucao <- "G2.6-  Trocar o nid de  um dos pacientes  no OpenMRS e o correspondente no iDART"
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
} else
# Solucao (G2.5) - Um dos  pacientes nao tem estado programa TARV  OpenMRS
solucao <- paste0("G2.2 - Trocar o nid de um dos pacientes, verificar processos clinicos")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
}
}
} }
else {  #  Nomes sao semelhantes , podemos assumir que trata-se do mesmo pacientes
# Verficar se sao duplicados no openmrs
## Grupo   3.1 (G3.1):  -Pacientes  duplicados no iDART e no OpenMRS , com nomes semelhantes
# priorizar o que tiver levantamentos mais actualizados
# if(nid_duplicado %in% duplicadosOpenmrs$Nid){
# Solucao Grupo 3.1 (G3.1)
nome_lev_mais_act <- getPacLevMaisRecente(index,nid_duplicado)
solucao <- paste0("G3.1 - Unir  os paciente ",nome_pat_1," e ",nome_pat_2, " no iDART e no OpenMRS. Paciente com nome: ",
nome_lev_mais_act, " e preferido por ter a data do ult lev mais recente")
dups_idart_openmrs$solucao[index[1]] <- solucao
dups_idart_openmrs$solucao[index[2]] <- solucao
# } else {
#
#
#   solucao <- paste0("G3.1  - Unir  os paciente  no iDART . O pac preferido e aquele que tiver data do ult lev mais recente")
#   SetSolucao(index,solucao)
# }
}
}
}
}
a = subset(dups_idart_openmrs, TRUE,c( 'id', 'uuid',
'patientid',
'dateofbirth',
'full_name',
'total_levantamentos',
'full_name_openmrs',
'identifier',
'birthdate',
'data_ult_levant',
'estado_tarv' , 'solucao'
))
View(a)
a$solucao[20]
View(duplicadosOpenmrs)
View(a)
a$solucao[which(a$estado_tarv=='ABANDONO')]
nid =a$patientid[30]
nid
View(a)
b =a$solucao[which(a$estado_tarv=='ABANDONO')]
b =a[which(a$estado_tarv=='ABANDONO')]
b =a[which(a$estado_tarv=='ABANDONO'),]
View(b)
nid_duplicado='0111030701/2018/00994'
index <- which(dups_idart_openmrs$patientid==nid_duplicado)
df_temp <- dups_idart_openmrs[index,]
nome_pat_1 <- dups_idart_openmrs$full_name[index[1]]
nome_pat_2 <- dups_idart_openmrs$full_name[index[2]]
estado_tarv_1 <- dups_idart_openmrs$estado_tarv[index[1]]
estado_tarv_2 <- dups_idart_openmrs$estado_tarv[index[2]]
